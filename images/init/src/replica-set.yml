---
- hosts: localhost
  connection: local
  vars:
    - namespace: "{{ lookup('env', 'NAMESPACE') | default('default', true) }}"
    - cluster_name: "{{ lookup('env', 'CLUSTER_NAME') | default('mongo', true) }}"
    - k8s_token: "{{ lookup('file', '/var/run/secrets/kubernetes.io/serviceaccount/token') }}"
    - rs_member_0: "{{ cluster_name }}-0"
  tasks:
    - name: "Get number of replicas to wait for"
      shell: "kubectl \
        -s https://kubernetes \
        --certificate-authority /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        --token {{ k8s_token }} \
        --namespace={{ namespace }} \
        get statefulset {{ cluster_name }} \
          -o jsonpath={$.spec.replicas}"
      register: replica_response

    - name: Set replicas
      set_fact: replicas="{{ replica_response.stdout | int }}"

    - name: Set ready check
      set_fact: ready_check="{{ ('true ' * 2 * replicas | int).rstrip() }}"

    - name: Write rs.init() command into a file
      template:
        src: templates/rs_init.j2
        dest: /tmp/rs_init.js

    - name: Write createUser() command into a file
      template:
        src: templates/create_user.j2
        dest: /tmp/create_user.js

    - name: "Wait for all replicas to be ready"
      shell: "kubectl \
        -s https://kubernetes \
        --certificate-authority /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        --token {{ k8s_token }} \
        --namespace={{ namespace }} \
        get pod -l app={{ cluster_name }} \
          -o jsonpath={$..status.containerStatuses..ready}"
      register: pod_status
      until: "pod_status.stdout == ready_check"
      retries: 5
      delay: 10

    - name: Copy rs.init() file to first rs member pod
      shell: "kubectl \
        -s https://kubernetes \
        --certificate-authority /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        --token {{ k8s_token }} \
        --namespace={{ namespace }} \
        cp /tmp/rs_init.js {{ rs_member_0 }}:/tmp/rs_init.js"

    - name: Copy createUser() file to first rs member pod
      shell: "kubectl \
        -s https://kubernetes \
        --certificate-authority /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        --token {{ k8s_token }} \
        --namespace={{ namespace }} \
        cp /tmp/create_user.js {{ rs_member_0 }}:/tmp/create_user.js"

    - name: Execute rs.init() command
      shell: "kubectl \
        -s https://kubernetes \
        --certificate-authority /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        --token {{ k8s_token }} \
        --namespace={{ namespace }} \
        exec {{ rs_member_0 }} \
          -- mongo --ssl \
          --sslCAFile /etc/ssl/mongod/ca.pem \
          --sslPEMKeyFile /etc/ssl/mongod/mongod.pem \
          --sslAllowInvalidHostnames
          /tmp/rs_init.js"

    - name: Wait until primary is elected
      shell: "kubectl \
        -s https://kubernetes \
        --certificate-authority /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        --token {{ k8s_token }} \
        --namespace={{ namespace }} \
        exec {{ rs_member_0 }} \
          -- mongo --ssl \
          --sslCAFile /etc/ssl/mongod/ca.pem \
          --sslPEMKeyFile /etc/ssl/mongod/mongod.pem \
          --sslAllowInvalidHostnames \
          --eval 'rs.status()'"
      register: rs_status
      until: "rs_status.stdout.find('PRIMARY') >= 0"
      retries: 5
      delay: 10

    - name: Execute createUser() command
      shell: "kubectl \
        -s https://kubernetes \
        --certificate-authority /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        --token {{ k8s_token }} \
        --namespace={{ namespace }} \
        exec {{ rs_member_0 }} \
          -- mongo --ssl \
          --sslCAFile /etc/ssl/mongod/ca.pem \
          --sslPEMKeyFile /etc/ssl/mongod/mongod.pem \
          --sslAllowInvalidHostnames
          /tmp/create_user.js"
